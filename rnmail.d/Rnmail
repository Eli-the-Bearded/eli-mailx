#!/bin/ksh
# probably still works under /bin/sh and /bin/bash

# syntax: Rnmail -h headerfile [oldart]		or
#         Rnmail -r reply                       or
#         Rnmail destination-list 		or just
#         Rnmail
#
# If in reply (-r) mode, the "reply" file is assumed to be an incoming
# message that needs to be replied to, which will set subject, to, cc,
# and other headers.

# Basted on Rnmail.SH,v 3.0 1992/02/23 21:25:39 davison Trn 
# Many modifications by Benjamin Elijah Griffin.
# Now (sometimes) uses new helper scripts: reply-headers, reply-body, bmime
# Original helper scripts sometimes used: mbox.saver
#
# Original copyright:
# 
# This software is Copyright 1991 by Stan Barber. 
#
# Permission is hereby granted to copy, reproduce, redistribute or otherwise
# use this software as long as: there is no monetary profit gained
# specifically from the use or reproduction of this software, it is not
# sold, rented, traded or otherwise marketed, and this copyright notice is
# included prominently in any copy made. 
#
# The author make no claims as to the fitness or correctness of this software
# for any use whatsoever, and it is provided as is. Any use of this software
# is at the user's own risk. 


export PATH || (echo "OOPS, this isn't sh.  Desperation time.  I will feed myself to sh."; sh $0; kill $$)


# per account settings
MAILRECORD=${MAILRECORD:-$HOME/outmail}
myemail=${RNMAILEMAIL:-$USER@$HOST}
myname=${RNMAILNAME:-"Mail User"}

# if you change this to something that does signatures, take out signature code

# your organization name
orgname=""
# what pager you use--if you have kernal paging use cat
pager="${PAGER-/usr/bin/less}"
# how you derive full names, bsd, usg, or other
nametype="bsd"
# default editor
defeditor="/usr/bin/vim"

# how not to do a newline with $echo $n "$message$c"
n="-n"
c=""

# helpers
bmime=bmime
replyheader=reply-headers
mboxsaver=/usr/lib/trn/mbox.saver
# formail comes in the procmail package, it's used to find the
# envelope address we should use.
formail=formail

checkutf8="checkutf8 -v"
check8859="check8859 -v"
checkascii="checkascii -v"


# system tools
mailer="${RNMAILER-/usr/sbin/sendmail}"
perl=perl
test=test
sed=sed
echo=echo
cat=cat
grep=grep
rm=rm
sleep=sleep
speller=ispell
who=

orgname=${NEWSORG-${ORGANIZATION-$orgname}}
dotdir=${DOTDIR-${HOME-$LOGDIR}}
tmpart=$dotdir/.letter.$$
mail_sig=${MAILSIGNATURE-$dotdir/.mail_sig}
if $test ! -r "$mail_sig" ; then
  # try the old default
  mail_sig=${MAILSIGNATURE-$dotdir/.signature}
fi

headerfile=""
reply=""
case $# in
0) ;;
*)  case $1 in
    -h)
	headerfile="$2"
	case $# in
	3) oldart="$3" ;;
	esac
	;;
    -r) reply="$2"
        # note: appears in two places
        reply-headers "$reply" > $tmpart
        if [ "x$use_you_wrote" = x ] ; then
            replytop='--top '
        else
            replytop=''
        fi
        $echo "X-Reply-Body: :r! reply-body $replytop'$reply'" >> $tmpart
	$echo "" >> $tmpart
        ;;
    -*) $echo "Warning: ignoring option $1" ;;
    esac
    ;;
esac

case $headerfile in
'')
    case $# in
    0)
	$echo $n "Message to reply to (use blank for none): $c"
	read reply

	if $test -n "$reply" -a -f "$reply" ; then
          : no need to ask for To:
	else
	
	  to=h
	  while $test "X$to" = Xh ; do
	      $echo ""
	      $echo $n "To: $c"
	      read to
	      case $to in
	      h)
		  $cat <<'EOH'

Type the net address of those people to whom you wish the message sent.
Additional recipients may be added on the Cc: line when you edit.

Separate multiple addresses with spaces.

EOH
		  ;;
	      esac
	  done
	fi
	;;
    *)
	to="$*"
	;;
    esac

    to=`$echo "$to" | $sed 's/  */ /g'`

    if $test -n "$reply" -a -f "$reply" ; then
      : no need to ask for Subject:, etc
    else
      title=h
      while $test "X$title" = Xh ; do
	  $echo ""
	  $echo $n "Title/Subject: $c"
	  read title
	  case $title in
	  h)
	      $cat <<'EOH'

Type the title for your message.  
EOH
	      ;;
	  esac

      done

      $echo $n "Thread-Index: $c"
      read tindex
      case "X$tindex" in
         X) ttopic="" ;;
         X*) 
	      ttopic="$title"
	      case "X$ttopic" in
		X[rR][eE]:?[fF][wW]:?*)
			      ttopic=${ttopic#[rR][eE]:?[fF][wW]:?} ;;
		X[rR][eE]:?*) ttopic=${ttopic#[rR][eE]:?} ;;
		X[fF][wW]:?*) ttopic=${ttopic#[fF][wW]:?} ;;
	      esac
	      ;;
      esac

    fi

    repeat=1
    while $test "X$repeat" = X1 ; do

      $echo $n "Attachment Count [0]: $c"
      read attachments
      case "X$attachments" in
	X[1-9]*) repeat='' ;;
	X)       repeat='' ; bmime=/usr/bin/true ;;
	X0*)     repeat='' ; bmime=/usr/bin/true ;; 
      esac  

    done

# now build a file with a header for them to edit
    
    if $test -n "$reply" -a -f "$reply" ; then
      # note: appears in two places
      reply-headers "$reply" > $tmpart
      if [ "x$use_you_wrote" = x ] ; then
          replytop='--top '
      else
          replytop=''
      fi
      $echo "X-Reply-Body: :r! reply-body $replytop'$reply'" >> $tmpart
    else

      case $orgname in
      /*) orgname=`$cat $orgname` ;;
      esac

      $sed -e '/^Reply-To: $/d' > $tmpart <<EOHeader
From: $myname <$myemail>
To: $to
Subject: $title
Reply-To: $REPLYTO
Thread-Topic: $ttopic
Thread-Index: $tindex
Mime-Version:
Cc:
Bcc:
EOHeader
    fi

    $bmime -$attachments | \
       $perl -pe 'if(/^(To|From|B?CC|Subject):/i){$_=""}' \
       >> $tmpart

    $echo '' >> $tmpart

    ;;
*)
    $cat < $headerfile  > $tmpart
    ;;
esac

# with attachments, this will end up in the wrong place
file=h
while $test X$file = Xh ; do
    $echo ""
    $echo $n "Prepared file to include [none]: $c"
    read file
    case $file in
    h)
	$cat <<'EOH'

If you have already produced the body of your message, type the filename
for it here.  If you just want to proceed directly to the editor, type a
RETURN.  In any event, you will be allowed to edit as many times as you
want before you send off the message.
EOH
	;;
    '')
	$echo "" >> $tmpart
	state=edit
	;;
    *)
	$cat $file >>$tmpart
	state=ask
	;;
    esac
done

$echo ""

# with attachments, this will end up in the wrong place
if $test -r $mail_sig; then
    $echo "-- " >> $tmpart
    $cat $mail_sig >> $tmpart
fi

while : ; do
    case $state in
    edit)
	rescue="$sleep 1; $cat $tmpart >>${HOME-$LOGDIR}/dead.letter ; $echo Message appended to ${HOME-$LOGDIR}/dead.letter ; $rm $tmpart ; exit"
	trap "$rescue" 1
	trap : 2
	case "${VISUAL-${EDITOR-}}" in
	'')
	    tmp=h
	    ;;
	*)
	    tmp=''
	    ;;
	esac
	while $test "X$tmp" = Xh ; do
	    $echo $n "Editor [${VISUAL-${EDITOR-$defeditor}}]: $c"
	    read tmp
	    case $tmp in
	    h)
		$cat <<'EOH'

Type a return to get the default editor, or type the name of the editor you
prefer.  The default editor depends on the VISUAL and EDITOR environment
variables.

EOH
		;;
	    '')
		;;
	    *)
		VISUAL=$tmp
		export VISUAL
		;;
	    esac
	done
	${VISUAL-${EDITOR-$defeditor}} $tmpart $oldart
	trap "$rescue" 2
	state=check
	;;
	
    check)
	# only check headers for charset declarations, and only if
	# valid MIME (has a Mime-Version: header).
        $sed -ne '1,/^[	 ]*$/ p' $tmpart > $tmpart.head
	result=
	# with no declartion, assume ASCII
	cstest=$checkascii
	if $grep -i '^mime-version:.*1' > /dev/null $tmpart.head ; then
		if $grep -Ei 'charset=[^a-z0-9]?utf-8' > /dev/null $tmpart.head ; then
			cstest="$checkutf8"
		fi
		if $grep -Ei 'charset=[^a-z0-9]?iso-8859' > /dev/null $tmpart.head ; then
			cstest="$check8859"
		fi
		if $grep -Ei 'charset=[^a-z0-9]?[us-]*ascii' > /dev/null $tmpart.head ; then
			cstest="$checkascii"
		fi
	fi
	result=`$cstest $tmpart`

	if $test "X$result" != X ; then
		$echo "Warning failed character set test $cstest:"
		$echo "$result"
	fi
	$rm -f $tmpart.head

	state=ask
	;;

    ask)
	$echo ""
	$echo $n "Check spelling, Send, Abort, Edit, or List? $c"
	read ans

	case $ans in
	[aA]*)
	    state=rescue
	    ;;
	[eE]*)
	    set $ans
	    case $# in
	    2)  VISUAL="$2" ;;
	    esac
	    state=edit
	    ;;
	[lL]*)
	    $pager $tmpart
	    state=ask
	    ;;
	[cC]*|[sS][pP]*)
	    $speller $tmpart
	    state=ask
	    ;;
	[sS]*)
	    state=send
	    ;;
	[hH]*)
	    $cat <<'EOH'

Type c to check the message's spelling, s to send the message, a to abort
and append the message to dead.letter, e to edit the message again, or l
to list the message with your pager.

To invoke an alternate editor, type 'e editor'.
EOH
	esac
	;;
    
    send)
        headerstrip='1,/^[   ]*$/{/^[A-Z][-A-Za-z0-9]*:[     ]*$/d;}'

	case $mailer in
	*sendmail)
	    # $from will have a leading space
	    from=$($formail -XFrom: < $tmpart | $formail -r -xTo:)

	    # do we want to set envelope "from " address?
	    case "X$from" in
		X?$myemail) envfrom='' ;;	# default address: no envelope
		X?foo@bar)  envfrom='' ;;	# no from address found
		*@*.*)      envfrom="-f $from"	# YES, set envelope
			    echo "Setting envelope to $from" # debug
			    ;;
	    esac

	    $sed "$headerstrip" $tmpart | $mailer $envfrom -t
	    ;;
# but recmail does not know about Bcc, alas
	*recmail)
	    $mailer <$tmpart
	    ;;
	*)
	    set X `$sed <$tmpart -n -e '/^To:/{' -e 's/To: *//p' -e q -e '}'`
	    shift
	    set X "$@" `$sed <$tmpart -n -e '/^Cc:/{' -e 's/Cc: *//p' -e q -e '}'`
	    shift
	    set X "$@" `$sed <$tmpart -n -e '/^Bcc:/{' -e 's/Bcc: *//p' -e q -e '}'`
	    shift
	    $grep -v "^Bcc:"  <$tmpart | $mailer "$@"
	    ;;
	esac
	case $? in
	0)
	    state=cleanup
	    ;;
	*)
	    state=rescue
	    ;;
	esac
	;;

    rescue)
	$cat $tmpart >> ${HOME-$LOGDIR}/dead.letter
	$echo "Message appended to ${HOME-$LOGDIR}/dead.letter"
	$rm $tmpart
	case "${reply-none}" in
	none)
	      exit
	      ;;
	   *) state=asksavereply
	      ;;
	esac
	;;

    cleanup)
	case "${MAILRECORD-none}" in
	none)
	    ;;
	*)
	    set X ${USER-${LOGNAME-`$who am i`}} unknown
	    shift
	    $mboxsaver $tmpart "." "." 0 0 Pnews $MAILRECORD "From $1 `LANG= date`"
	    if $test $? -eq 0 ; then
		$echo "Message appended to $MAILRECORD"
	        $rm $tmpart
	    else
		$echo "Cannot append to $MAILRECORD"
		$echo "Not deleting temporary file $tmpart"
	    fi
	    ;;
	esac
	case "${reply-none}" in
	none)
	      exit
	      ;;
	   *) state=asksavereply
	      ;;
	esac
	;;

    asksavereply)
	if [ ! -s "$reply" ] ; then
	  exit
	fi
	if [ ! -f "$reply" ] ; then
	  $echo "Replied-to message '$reply' already deleted."
	  exit
	fi

	$echo $n "Keep replied-to message '$reply'? $c"
	read ans

	case "X$ans" in
	X[yY]*)
	    exit
	    ;;
	X[nN]*)
	    $rm "$reply"
	    ;;
	X) $echo "Keeping message '$reply'"
	    ;;
	esac

	exit
	;;
    esac
done
